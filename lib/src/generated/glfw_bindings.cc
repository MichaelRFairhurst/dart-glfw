// Copyright (c) 2015, the Dart GLFW extension authors. All rights reserved.
// Please see the AUTHORS file for details. Use of this source code is governed
// by a BSD-style license that can be found in the LICENSE file or at
// https://developers.google.com/open-source/licenses/bsd

// This file is auto-generated by scripts in the tools/ directory.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <GLFW/glfw3.h>
#include <dart_api.h>

#include "../instantiate_glfw_classes.h"
#include "../util.h"
#include "glfw_bindings.h"

// Generated GLFW function bindings for Dart.

void glfwInit_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwInit_);
  int ret = glfwInit();
  Dart_SetBooleanReturnValue(arguments, ret);
  TRACE_END(glfwInit_);
}

void glfwTerminate_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwTerminate_);
  glfwTerminate();

  TRACE_END(glfwTerminate_);
}

void glfwGetVersionString_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwGetVersionString_);
  const char* ret = glfwGetVersionString();
  Dart_SetReturnValue(arguments, HANDLE(Dart_NewStringFromCString(ret)));
  TRACE_END(glfwGetVersionString_);
}

static Dart_Handle dart_GLFWerrorfun_cb = NULL;

void _GLFWerrorfun_cb(int error, const char* description) {
  Dart_Handle arguments[2];
  arguments[0] = HANDLE(Dart_NewInteger(error));
  arguments[1] = HANDLE(Dart_NewStringFromCString(description));
  HANDLE_INVOKE(Dart_InvokeClosure(dart_GLFWerrorfun_cb, 2, arguments));
}
void glfwSetErrorCallback_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetErrorCallback_);
  Dart_Handle new_GLFWerrorfun_cb =
      HANDLE(Dart_GetNativeArgument(arguments, 0));
  new_GLFWerrorfun_cb = HANDLE(Dart_NewPersistentHandle(new_GLFWerrorfun_cb));
  Dart_Handle old_GLFWerrorfun_cb = Dart_Null();
  if (dart_GLFWerrorfun_cb != NULL) {
    old_GLFWerrorfun_cb =
        HandleError(Dart_HandleFromPersistent(dart_GLFWerrorfun_cb));
    Dart_DeletePersistentHandle(dart_GLFWerrorfun_cb);
  }
  dart_GLFWerrorfun_cb = new_GLFWerrorfun_cb;
  glfwSetErrorCallback(_GLFWerrorfun_cb);
  Dart_SetReturnValue(arguments, old_GLFWerrorfun_cb);
  TRACE_END(glfwSetErrorCallback_);
}
void glfwGetPrimaryMonitor_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwGetPrimaryMonitor_);
  GLFWmonitor* ret = glfwGetPrimaryMonitor();
  Dart_SetReturnValue(arguments, HANDLE(NewGLFWmonitor(ret)));
  TRACE_END(glfwGetPrimaryMonitor_);
}

void glfwGetMonitorName_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwGetMonitorName_);
  Dart_Handle monitor_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWmonitor* monitor = GetNativePointer<GLFWmonitor>(monitor_obj);

  const char* ret = glfwGetMonitorName(monitor);
  Dart_SetReturnValue(arguments, HANDLE(Dart_NewStringFromCString(ret)));
  TRACE_END(glfwGetMonitorName_);
}

static Dart_Handle dart_GLFWmonitorfun_cb = NULL;

void _GLFWmonitorfun_cb(GLFWmonitor* monitor, int event) {
  Dart_Handle arguments[2];
  arguments[0] = HANDLE(NewGLFWmonitor(monitor));
  arguments[1] = HANDLE(Dart_NewInteger(event));
  HANDLE_INVOKE(Dart_InvokeClosure(dart_GLFWmonitorfun_cb, 2, arguments));
}
void glfwSetMonitorCallback_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetMonitorCallback_);
  Dart_Handle new_GLFWmonitorfun_cb =
      HANDLE(Dart_GetNativeArgument(arguments, 0));
  new_GLFWmonitorfun_cb =
      HANDLE(Dart_NewPersistentHandle(new_GLFWmonitorfun_cb));
  Dart_Handle old_GLFWmonitorfun_cb = Dart_Null();
  if (dart_GLFWmonitorfun_cb != NULL) {
    old_GLFWmonitorfun_cb =
        HandleError(Dart_HandleFromPersistent(dart_GLFWmonitorfun_cb));
    Dart_DeletePersistentHandle(dart_GLFWmonitorfun_cb);
  }
  dart_GLFWmonitorfun_cb = new_GLFWmonitorfun_cb;
  glfwSetMonitorCallback(_GLFWmonitorfun_cb);
  Dart_SetReturnValue(arguments, old_GLFWmonitorfun_cb);
  TRACE_END(glfwSetMonitorCallback_);
}
void glfwGetVideoMode_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwGetVideoMode_);
  Dart_Handle monitor_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWmonitor* monitor = GetNativePointer<GLFWmonitor>(monitor_obj);

  const GLFWvidmode* ret = glfwGetVideoMode(monitor);
  Dart_SetReturnValue(arguments, HANDLE(NewGLFWvidmode(ret)));
  TRACE_END(glfwGetVideoMode_);
}

void glfwSetGamma_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetGamma_);
  Dart_Handle monitor_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWmonitor* monitor = GetNativePointer<GLFWmonitor>(monitor_obj);

  double gamma;
  HANDLE(Dart_GetNativeDoubleArgument(arguments, 1, &gamma));

  glfwSetGamma(monitor, gamma);

  TRACE_END(glfwSetGamma_);
}

void glfwGetGammaRamp_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwGetGammaRamp_);
  Dart_Handle monitor_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWmonitor* monitor = GetNativePointer<GLFWmonitor>(monitor_obj);

  const GLFWgammaramp* ret = glfwGetGammaRamp(monitor);
  Dart_SetReturnValue(arguments, HANDLE(NewGLFWgammaramp(ret)));
  TRACE_END(glfwGetGammaRamp_);
}

void glfwSetGammaRamp_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetGammaRamp_);
  Dart_Handle monitor_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWmonitor* monitor = GetNativePointer<GLFWmonitor>(monitor_obj);

  Dart_Handle ramp_obj = HANDLE(Dart_GetNativeArgument(arguments, 1));
  GLFWgammaramp* ramp = NULL;
  if (!Dart_IsNull(ramp_obj)) {
    ramp = NewGLFWgammarampFromDart(ramp_obj);
  }

  glfwSetGammaRamp(monitor, ramp);

  if (ramp != NULL) {
    free(ramp->red);
    free(ramp->green);
    free(ramp->blue);
    free(ramp);
  }
  TRACE_END(glfwSetGammaRamp_);
}

void glfwDefaultWindowHints_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwDefaultWindowHints_);
  glfwDefaultWindowHints();

  TRACE_END(glfwDefaultWindowHints_);
}

void glfwWindowHint_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwWindowHint_);
  int64_t hint;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 0, &hint));

  int64_t value;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 1, &value));

  glfwWindowHint(hint, value);

  TRACE_END(glfwWindowHint_);
}

void glfwCreateWindow_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwCreateWindow_);
  int64_t width;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 0, &width));

  int64_t height;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 1, &height));

  void* title_peer = NULL;
  Dart_Handle title_arg =
      HANDLE(Dart_GetNativeStringArgument(arguments, 2, (void**)&title_peer));
  const char* title = NULL;
  HANDLE(Dart_StringToCString(title_arg, &title));

  Dart_Handle monitor_obj = HANDLE(Dart_GetNativeArgument(arguments, 3));
  GLFWmonitor* monitor = GetNativePointer<GLFWmonitor>(monitor_obj);

  Dart_Handle share_obj = HANDLE(Dart_GetNativeArgument(arguments, 4));
  GLFWwindow* share = GetNativePointer<GLFWwindow>(share_obj);

  GLFWwindow* ret = glfwCreateWindow(width, height, title, monitor, share);
  Dart_SetReturnValue(arguments, HANDLE(NewGLFWwindow(ret)));
  TRACE_END(glfwCreateWindow_);
}

void glfwDestroyWindow_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwDestroyWindow_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);

  glfwDestroyWindow(window);

  TRACE_END(glfwDestroyWindow_);
}

void glfwWindowShouldClose_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwWindowShouldClose_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);

  int ret = glfwWindowShouldClose(window);
  Dart_SetIntegerReturnValue(arguments, ret);
  TRACE_END(glfwWindowShouldClose_);
}

void glfwSetWindowShouldClose_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetWindowShouldClose_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);

  int64_t value;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 1, &value));

  glfwSetWindowShouldClose(window, value);

  TRACE_END(glfwSetWindowShouldClose_);
}

void glfwSetWindowTitle_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetWindowTitle_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);

  void* title_peer = NULL;
  Dart_Handle title_arg =
      HANDLE(Dart_GetNativeStringArgument(arguments, 1, (void**)&title_peer));
  const char* title = NULL;
  HANDLE(Dart_StringToCString(title_arg, &title));

  glfwSetWindowTitle(window, title);

  TRACE_END(glfwSetWindowTitle_);
}

void glfwSetWindowIcon_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetWindowIcon_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);

  int64_t count;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 1, &count));

  Dart_Handle images_obj = HANDLE(Dart_GetNativeArgument(arguments, 2));
  GLFWimage* images = NULL;
  if (!Dart_IsNull(images_obj)) {
    images = NewGLFWimageFromDart(images_obj);
  }

  glfwSetWindowIcon(window, count, images);

  if (images != NULL) {
    free(images->pixels);
    free(images);
  }
  TRACE_END(glfwSetWindowIcon_);
}

void glfwSetWindowPos_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetWindowPos_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);

  int64_t xpos;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 1, &xpos));

  int64_t ypos;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 2, &ypos));

  glfwSetWindowPos(window, xpos, ypos);

  TRACE_END(glfwSetWindowPos_);
}

void glfwSetWindowSizeLimits_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetWindowSizeLimits_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);

  int64_t minwidth;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 1, &minwidth));

  int64_t minheight;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 2, &minheight));

  int64_t maxwidth;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 3, &maxwidth));

  int64_t maxheight;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 4, &maxheight));

  glfwSetWindowSizeLimits(window, minwidth, minheight, maxwidth, maxheight);

  TRACE_END(glfwSetWindowSizeLimits_);
}

void glfwSetWindowAspectRatio_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetWindowAspectRatio_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);

  int64_t numer;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 1, &numer));

  int64_t denom;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 2, &denom));

  glfwSetWindowAspectRatio(window, numer, denom);

  TRACE_END(glfwSetWindowAspectRatio_);
}

void glfwSetWindowSize_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetWindowSize_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);

  int64_t width;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 1, &width));

  int64_t height;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 2, &height));

  glfwSetWindowSize(window, width, height);

  TRACE_END(glfwSetWindowSize_);
}

void glfwIconifyWindow_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwIconifyWindow_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);

  glfwIconifyWindow(window);

  TRACE_END(glfwIconifyWindow_);
}

void glfwRestoreWindow_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwRestoreWindow_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);

  glfwRestoreWindow(window);

  TRACE_END(glfwRestoreWindow_);
}

void glfwMaximizeWindow_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwMaximizeWindow_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);

  glfwMaximizeWindow(window);

  TRACE_END(glfwMaximizeWindow_);
}

void glfwShowWindow_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwShowWindow_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);

  glfwShowWindow(window);

  TRACE_END(glfwShowWindow_);
}

void glfwHideWindow_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwHideWindow_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);

  glfwHideWindow(window);

  TRACE_END(glfwHideWindow_);
}

void glfwFocusWindow_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwFocusWindow_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);

  glfwFocusWindow(window);

  TRACE_END(glfwFocusWindow_);
}

void glfwGetWindowMonitor_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwGetWindowMonitor_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);

  GLFWmonitor* ret = glfwGetWindowMonitor(window);
  Dart_SetReturnValue(arguments, HANDLE(NewGLFWmonitor(ret)));
  TRACE_END(glfwGetWindowMonitor_);
}

void glfwSetWindowMonitor_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetWindowMonitor_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);

  Dart_Handle monitor_obj = HANDLE(Dart_GetNativeArgument(arguments, 1));
  GLFWmonitor* monitor = GetNativePointer<GLFWmonitor>(monitor_obj);

  int64_t xpos;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 2, &xpos));

  int64_t ypos;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 3, &ypos));

  int64_t width;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 4, &width));

  int64_t height;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 5, &height));

  int64_t refreshRate;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 6, &refreshRate));

  glfwSetWindowMonitor(window, monitor, xpos, ypos, width, height, refreshRate);

  TRACE_END(glfwSetWindowMonitor_);
}

void glfwGetWindowAttrib_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwGetWindowAttrib_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);

  int64_t attrib;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 1, &attrib));

  int ret = glfwGetWindowAttrib(window, attrib);
  Dart_SetIntegerReturnValue(arguments, ret);
  TRACE_END(glfwGetWindowAttrib_);
}

static Dart_Handle dart_GLFWwindowposfun_cb = NULL;

void _GLFWwindowposfun_cb(GLFWwindow* window, int xpos, int ypos) {
  Dart_Handle arguments[3];
  arguments[0] = HANDLE(NewGLFWwindow(window));
  arguments[1] = HANDLE(Dart_NewInteger(xpos));
  arguments[2] = HANDLE(Dart_NewInteger(ypos));
  HANDLE_INVOKE(Dart_InvokeClosure(dart_GLFWwindowposfun_cb, 3, arguments));
}
void glfwSetWindowPosCallback_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetWindowPosCallback_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);
  Dart_Handle new_GLFWwindowposfun_cb =
      HANDLE(Dart_GetNativeArgument(arguments, 1));
  new_GLFWwindowposfun_cb =
      HANDLE(Dart_NewPersistentHandle(new_GLFWwindowposfun_cb));
  Dart_Handle old_GLFWwindowposfun_cb = Dart_Null();
  if (dart_GLFWwindowposfun_cb != NULL) {
    old_GLFWwindowposfun_cb =
        HandleError(Dart_HandleFromPersistent(dart_GLFWwindowposfun_cb));
    Dart_DeletePersistentHandle(dart_GLFWwindowposfun_cb);
  }
  dart_GLFWwindowposfun_cb = new_GLFWwindowposfun_cb;
  glfwSetWindowPosCallback(window, _GLFWwindowposfun_cb);
  Dart_SetReturnValue(arguments, old_GLFWwindowposfun_cb);
  TRACE_END(glfwSetWindowPosCallback_);
}
static Dart_Handle dart_GLFWwindowsizefun_cb = NULL;

void _GLFWwindowsizefun_cb(GLFWwindow* window, int width, int height) {
  Dart_Handle arguments[3];
  arguments[0] = HANDLE(NewGLFWwindow(window));
  arguments[1] = HANDLE(Dart_NewInteger(width));
  arguments[2] = HANDLE(Dart_NewInteger(height));
  HANDLE_INVOKE(Dart_InvokeClosure(dart_GLFWwindowsizefun_cb, 3, arguments));
}
void glfwSetWindowSizeCallback_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetWindowSizeCallback_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);
  Dart_Handle new_GLFWwindowsizefun_cb =
      HANDLE(Dart_GetNativeArgument(arguments, 1));
  new_GLFWwindowsizefun_cb =
      HANDLE(Dart_NewPersistentHandle(new_GLFWwindowsizefun_cb));
  Dart_Handle old_GLFWwindowsizefun_cb = Dart_Null();
  if (dart_GLFWwindowsizefun_cb != NULL) {
    old_GLFWwindowsizefun_cb =
        HandleError(Dart_HandleFromPersistent(dart_GLFWwindowsizefun_cb));
    Dart_DeletePersistentHandle(dart_GLFWwindowsizefun_cb);
  }
  dart_GLFWwindowsizefun_cb = new_GLFWwindowsizefun_cb;
  glfwSetWindowSizeCallback(window, _GLFWwindowsizefun_cb);
  Dart_SetReturnValue(arguments, old_GLFWwindowsizefun_cb);
  TRACE_END(glfwSetWindowSizeCallback_);
}
static Dart_Handle dart_GLFWwindowclosefun_cb = NULL;

void _GLFWwindowclosefun_cb(GLFWwindow* window) {
  Dart_Handle arguments[1];
  arguments[0] = HANDLE(NewGLFWwindow(window));
  HANDLE_INVOKE(Dart_InvokeClosure(dart_GLFWwindowclosefun_cb, 1, arguments));
}
void glfwSetWindowCloseCallback_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetWindowCloseCallback_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);
  Dart_Handle new_GLFWwindowclosefun_cb =
      HANDLE(Dart_GetNativeArgument(arguments, 1));
  new_GLFWwindowclosefun_cb =
      HANDLE(Dart_NewPersistentHandle(new_GLFWwindowclosefun_cb));
  Dart_Handle old_GLFWwindowclosefun_cb = Dart_Null();
  if (dart_GLFWwindowclosefun_cb != NULL) {
    old_GLFWwindowclosefun_cb =
        HandleError(Dart_HandleFromPersistent(dart_GLFWwindowclosefun_cb));
    Dart_DeletePersistentHandle(dart_GLFWwindowclosefun_cb);
  }
  dart_GLFWwindowclosefun_cb = new_GLFWwindowclosefun_cb;
  glfwSetWindowCloseCallback(window, _GLFWwindowclosefun_cb);
  Dart_SetReturnValue(arguments, old_GLFWwindowclosefun_cb);
  TRACE_END(glfwSetWindowCloseCallback_);
}
static Dart_Handle dart_GLFWwindowrefreshfun_cb = NULL;

void _GLFWwindowrefreshfun_cb(GLFWwindow* window) {
  Dart_Handle arguments[1];
  arguments[0] = HANDLE(NewGLFWwindow(window));
  HANDLE_INVOKE(Dart_InvokeClosure(dart_GLFWwindowrefreshfun_cb, 1, arguments));
}
void glfwSetWindowRefreshCallback_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetWindowRefreshCallback_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);
  Dart_Handle new_GLFWwindowrefreshfun_cb =
      HANDLE(Dart_GetNativeArgument(arguments, 1));
  new_GLFWwindowrefreshfun_cb =
      HANDLE(Dart_NewPersistentHandle(new_GLFWwindowrefreshfun_cb));
  Dart_Handle old_GLFWwindowrefreshfun_cb = Dart_Null();
  if (dart_GLFWwindowrefreshfun_cb != NULL) {
    old_GLFWwindowrefreshfun_cb =
        HandleError(Dart_HandleFromPersistent(dart_GLFWwindowrefreshfun_cb));
    Dart_DeletePersistentHandle(dart_GLFWwindowrefreshfun_cb);
  }
  dart_GLFWwindowrefreshfun_cb = new_GLFWwindowrefreshfun_cb;
  glfwSetWindowRefreshCallback(window, _GLFWwindowrefreshfun_cb);
  Dart_SetReturnValue(arguments, old_GLFWwindowrefreshfun_cb);
  TRACE_END(glfwSetWindowRefreshCallback_);
}
static Dart_Handle dart_GLFWwindowfocusfun_cb = NULL;

void _GLFWwindowfocusfun_cb(GLFWwindow* window, int focused) {
  Dart_Handle arguments[2];
  arguments[0] = HANDLE(NewGLFWwindow(window));
  arguments[1] = HANDLE(Dart_NewBoolean(focused));
  HANDLE_INVOKE(Dart_InvokeClosure(dart_GLFWwindowfocusfun_cb, 2, arguments));
}
void glfwSetWindowFocusCallback_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetWindowFocusCallback_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);
  Dart_Handle new_GLFWwindowfocusfun_cb =
      HANDLE(Dart_GetNativeArgument(arguments, 1));
  new_GLFWwindowfocusfun_cb =
      HANDLE(Dart_NewPersistentHandle(new_GLFWwindowfocusfun_cb));
  Dart_Handle old_GLFWwindowfocusfun_cb = Dart_Null();
  if (dart_GLFWwindowfocusfun_cb != NULL) {
    old_GLFWwindowfocusfun_cb =
        HandleError(Dart_HandleFromPersistent(dart_GLFWwindowfocusfun_cb));
    Dart_DeletePersistentHandle(dart_GLFWwindowfocusfun_cb);
  }
  dart_GLFWwindowfocusfun_cb = new_GLFWwindowfocusfun_cb;
  glfwSetWindowFocusCallback(window, _GLFWwindowfocusfun_cb);
  Dart_SetReturnValue(arguments, old_GLFWwindowfocusfun_cb);
  TRACE_END(glfwSetWindowFocusCallback_);
}
static Dart_Handle dart_GLFWwindowiconifyfun_cb = NULL;

void _GLFWwindowiconifyfun_cb(GLFWwindow* window, int iconified) {
  Dart_Handle arguments[2];
  arguments[0] = HANDLE(NewGLFWwindow(window));
  arguments[1] = HANDLE(Dart_NewBoolean(iconified));
  HANDLE_INVOKE(Dart_InvokeClosure(dart_GLFWwindowiconifyfun_cb, 2, arguments));
}
void glfwSetWindowIconifyCallback_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetWindowIconifyCallback_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);
  Dart_Handle new_GLFWwindowiconifyfun_cb =
      HANDLE(Dart_GetNativeArgument(arguments, 1));
  new_GLFWwindowiconifyfun_cb =
      HANDLE(Dart_NewPersistentHandle(new_GLFWwindowiconifyfun_cb));
  Dart_Handle old_GLFWwindowiconifyfun_cb = Dart_Null();
  if (dart_GLFWwindowiconifyfun_cb != NULL) {
    old_GLFWwindowiconifyfun_cb =
        HandleError(Dart_HandleFromPersistent(dart_GLFWwindowiconifyfun_cb));
    Dart_DeletePersistentHandle(dart_GLFWwindowiconifyfun_cb);
  }
  dart_GLFWwindowiconifyfun_cb = new_GLFWwindowiconifyfun_cb;
  glfwSetWindowIconifyCallback(window, _GLFWwindowiconifyfun_cb);
  Dart_SetReturnValue(arguments, old_GLFWwindowiconifyfun_cb);
  TRACE_END(glfwSetWindowIconifyCallback_);
}
static Dart_Handle dart_GLFWframebuffersizefun_cb = NULL;

void _GLFWframebuffersizefun_cb(GLFWwindow* window, int width, int height) {
  Dart_Handle arguments[3];
  arguments[0] = HANDLE(NewGLFWwindow(window));
  arguments[1] = HANDLE(Dart_NewInteger(width));
  arguments[2] = HANDLE(Dart_NewInteger(height));
  HANDLE_INVOKE(
      Dart_InvokeClosure(dart_GLFWframebuffersizefun_cb, 3, arguments));
}
void glfwSetFramebufferSizeCallback_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetFramebufferSizeCallback_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);
  Dart_Handle new_GLFWframebuffersizefun_cb =
      HANDLE(Dart_GetNativeArgument(arguments, 1));
  new_GLFWframebuffersizefun_cb =
      HANDLE(Dart_NewPersistentHandle(new_GLFWframebuffersizefun_cb));
  Dart_Handle old_GLFWframebuffersizefun_cb = Dart_Null();
  if (dart_GLFWframebuffersizefun_cb != NULL) {
    old_GLFWframebuffersizefun_cb =
        HandleError(Dart_HandleFromPersistent(dart_GLFWframebuffersizefun_cb));
    Dart_DeletePersistentHandle(dart_GLFWframebuffersizefun_cb);
  }
  dart_GLFWframebuffersizefun_cb = new_GLFWframebuffersizefun_cb;
  glfwSetFramebufferSizeCallback(window, _GLFWframebuffersizefun_cb);
  Dart_SetReturnValue(arguments, old_GLFWframebuffersizefun_cb);
  TRACE_END(glfwSetFramebufferSizeCallback_);
}
void glfwPollEvents_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwPollEvents_);
  glfwPollEvents();

  TRACE_END(glfwPollEvents_);
}

void glfwWaitEvents_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwWaitEvents_);
  glfwWaitEvents();

  TRACE_END(glfwWaitEvents_);
}

void glfwWaitEventsTimeout_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwWaitEventsTimeout_);
  double timeout;
  HANDLE(Dart_GetNativeDoubleArgument(arguments, 0, &timeout));

  glfwWaitEventsTimeout(timeout);

  TRACE_END(glfwWaitEventsTimeout_);
}

void glfwPostEmptyEvent_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwPostEmptyEvent_);
  glfwPostEmptyEvent();

  TRACE_END(glfwPostEmptyEvent_);
}

void glfwGetInputMode_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwGetInputMode_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);

  int64_t mode;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 1, &mode));

  int ret = glfwGetInputMode(window, mode);
  Dart_SetIntegerReturnValue(arguments, ret);
  TRACE_END(glfwGetInputMode_);
}

void glfwSetInputMode_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetInputMode_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);

  int64_t mode;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 1, &mode));

  int64_t value;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 2, &value));

  glfwSetInputMode(window, mode, value);

  TRACE_END(glfwSetInputMode_);
}

void glfwGetKeyName_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwGetKeyName_);
  int64_t key;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 0, &key));

  int64_t scancode;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 1, &scancode));

  const char* ret = glfwGetKeyName(key, scancode);
  Dart_SetReturnValue(arguments, HANDLE(Dart_NewStringFromCString(ret)));
  TRACE_END(glfwGetKeyName_);
}

void glfwGetKey_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwGetKey_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);

  int64_t key;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 1, &key));

  int ret = glfwGetKey(window, key);
  Dart_SetIntegerReturnValue(arguments, ret);
  TRACE_END(glfwGetKey_);
}

void glfwGetMouseButton_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwGetMouseButton_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);

  int64_t button;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 1, &button));

  int ret = glfwGetMouseButton(window, button);
  Dart_SetIntegerReturnValue(arguments, ret);
  TRACE_END(glfwGetMouseButton_);
}

void glfwSetCursorPos_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetCursorPos_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);

  double xpos;
  HANDLE(Dart_GetNativeDoubleArgument(arguments, 1, &xpos));

  double ypos;
  HANDLE(Dart_GetNativeDoubleArgument(arguments, 2, &ypos));

  glfwSetCursorPos(window, xpos, ypos);

  TRACE_END(glfwSetCursorPos_);
}

void glfwCreateCursor_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwCreateCursor_);
  Dart_Handle image_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWimage* image = NULL;
  if (!Dart_IsNull(image_obj)) {
    image = NewGLFWimageFromDart(image_obj);
  }

  int64_t xhot;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 1, &xhot));

  int64_t yhot;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 2, &yhot));

  GLFWcursor* ret = glfwCreateCursor(image, xhot, yhot);
  Dart_SetReturnValue(arguments, HANDLE(NewGLFWcursor(ret)));
  if (image != NULL) {
    free(image->pixels);
    free(image);
  }
  TRACE_END(glfwCreateCursor_);
}

void glfwCreateStandardCursor_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwCreateStandardCursor_);
  int64_t shape;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 0, &shape));

  GLFWcursor* ret = glfwCreateStandardCursor(shape);
  Dart_SetReturnValue(arguments, HANDLE(NewGLFWcursor(ret)));
  TRACE_END(glfwCreateStandardCursor_);
}

void glfwDestroyCursor_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwDestroyCursor_);
  Dart_Handle cursor_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWcursor* cursor = GetNativePointer<GLFWcursor>(cursor_obj);

  glfwDestroyCursor(cursor);

  TRACE_END(glfwDestroyCursor_);
}

void glfwSetCursor_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetCursor_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);

  Dart_Handle cursor_obj = HANDLE(Dart_GetNativeArgument(arguments, 1));
  GLFWcursor* cursor = GetNativePointer<GLFWcursor>(cursor_obj);

  glfwSetCursor(window, cursor);

  TRACE_END(glfwSetCursor_);
}

static Dart_Handle dart_GLFWkeyfun_cb = NULL;

void _GLFWkeyfun_cb(GLFWwindow* window, int key, int scancode, int action,
                    int mods) {
  Dart_Handle arguments[5];
  arguments[0] = HANDLE(NewGLFWwindow(window));
  arguments[1] = HANDLE(Dart_NewInteger(key));
  arguments[2] = HANDLE(Dart_NewInteger(scancode));
  arguments[3] = HANDLE(Dart_NewInteger(action));
  arguments[4] = HANDLE(Dart_NewInteger(mods));
  HANDLE_INVOKE(Dart_InvokeClosure(dart_GLFWkeyfun_cb, 5, arguments));
}
void glfwSetKeyCallback_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetKeyCallback_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);
  Dart_Handle new_GLFWkeyfun_cb = HANDLE(Dart_GetNativeArgument(arguments, 1));
  new_GLFWkeyfun_cb = HANDLE(Dart_NewPersistentHandle(new_GLFWkeyfun_cb));
  Dart_Handle old_GLFWkeyfun_cb = Dart_Null();
  if (dart_GLFWkeyfun_cb != NULL) {
    old_GLFWkeyfun_cb =
        HandleError(Dart_HandleFromPersistent(dart_GLFWkeyfun_cb));
    Dart_DeletePersistentHandle(dart_GLFWkeyfun_cb);
  }
  dart_GLFWkeyfun_cb = new_GLFWkeyfun_cb;
  glfwSetKeyCallback(window, _GLFWkeyfun_cb);
  Dart_SetReturnValue(arguments, old_GLFWkeyfun_cb);
  TRACE_END(glfwSetKeyCallback_);
}
static Dart_Handle dart_GLFWcharfun_cb = NULL;

void _GLFWcharfun_cb(GLFWwindow* window, unsigned int codepoint) {
  Dart_Handle arguments[2];
  arguments[0] = HANDLE(NewGLFWwindow(window));
  arguments[1] = HANDLE(Dart_NewInteger(codepoint));
  HANDLE_INVOKE(Dart_InvokeClosure(dart_GLFWcharfun_cb, 2, arguments));
}
void glfwSetCharCallback_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetCharCallback_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);
  Dart_Handle new_GLFWcharfun_cb = HANDLE(Dart_GetNativeArgument(arguments, 1));
  new_GLFWcharfun_cb = HANDLE(Dart_NewPersistentHandle(new_GLFWcharfun_cb));
  Dart_Handle old_GLFWcharfun_cb = Dart_Null();
  if (dart_GLFWcharfun_cb != NULL) {
    old_GLFWcharfun_cb =
        HandleError(Dart_HandleFromPersistent(dart_GLFWcharfun_cb));
    Dart_DeletePersistentHandle(dart_GLFWcharfun_cb);
  }
  dart_GLFWcharfun_cb = new_GLFWcharfun_cb;
  glfwSetCharCallback(window, _GLFWcharfun_cb);
  Dart_SetReturnValue(arguments, old_GLFWcharfun_cb);
  TRACE_END(glfwSetCharCallback_);
}
static Dart_Handle dart_GLFWcharmodsfun_cb = NULL;

void _GLFWcharmodsfun_cb(GLFWwindow* window, unsigned int codepoint, int mods) {
  Dart_Handle arguments[3];
  arguments[0] = HANDLE(NewGLFWwindow(window));
  arguments[1] = HANDLE(Dart_NewInteger(codepoint));
  arguments[2] = HANDLE(Dart_NewInteger(mods));
  HANDLE_INVOKE(Dart_InvokeClosure(dart_GLFWcharmodsfun_cb, 3, arguments));
}
void glfwSetCharModsCallback_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetCharModsCallback_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);
  Dart_Handle new_GLFWcharmodsfun_cb =
      HANDLE(Dart_GetNativeArgument(arguments, 1));
  new_GLFWcharmodsfun_cb =
      HANDLE(Dart_NewPersistentHandle(new_GLFWcharmodsfun_cb));
  Dart_Handle old_GLFWcharmodsfun_cb = Dart_Null();
  if (dart_GLFWcharmodsfun_cb != NULL) {
    old_GLFWcharmodsfun_cb =
        HandleError(Dart_HandleFromPersistent(dart_GLFWcharmodsfun_cb));
    Dart_DeletePersistentHandle(dart_GLFWcharmodsfun_cb);
  }
  dart_GLFWcharmodsfun_cb = new_GLFWcharmodsfun_cb;
  glfwSetCharModsCallback(window, _GLFWcharmodsfun_cb);
  Dart_SetReturnValue(arguments, old_GLFWcharmodsfun_cb);
  TRACE_END(glfwSetCharModsCallback_);
}
static Dart_Handle dart_GLFWmousebuttonfun_cb = NULL;

void _GLFWmousebuttonfun_cb(GLFWwindow* window, int button, int action,
                            int mods) {
  Dart_Handle arguments[4];
  arguments[0] = HANDLE(NewGLFWwindow(window));
  arguments[1] = HANDLE(Dart_NewInteger(button));
  arguments[2] = HANDLE(Dart_NewInteger(action));
  arguments[3] = HANDLE(Dart_NewInteger(mods));
  HANDLE_INVOKE(Dart_InvokeClosure(dart_GLFWmousebuttonfun_cb, 4, arguments));
}
void glfwSetMouseButtonCallback_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetMouseButtonCallback_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);
  Dart_Handle new_GLFWmousebuttonfun_cb =
      HANDLE(Dart_GetNativeArgument(arguments, 1));
  new_GLFWmousebuttonfun_cb =
      HANDLE(Dart_NewPersistentHandle(new_GLFWmousebuttonfun_cb));
  Dart_Handle old_GLFWmousebuttonfun_cb = Dart_Null();
  if (dart_GLFWmousebuttonfun_cb != NULL) {
    old_GLFWmousebuttonfun_cb =
        HandleError(Dart_HandleFromPersistent(dart_GLFWmousebuttonfun_cb));
    Dart_DeletePersistentHandle(dart_GLFWmousebuttonfun_cb);
  }
  dart_GLFWmousebuttonfun_cb = new_GLFWmousebuttonfun_cb;
  glfwSetMouseButtonCallback(window, _GLFWmousebuttonfun_cb);
  Dart_SetReturnValue(arguments, old_GLFWmousebuttonfun_cb);
  TRACE_END(glfwSetMouseButtonCallback_);
}
static Dart_Handle dart_GLFWcursorposfun_cb = NULL;

void _GLFWcursorposfun_cb(GLFWwindow* window, double xpos, double ypos) {
  Dart_Handle arguments[3];
  arguments[0] = HANDLE(NewGLFWwindow(window));
  arguments[1] = HANDLE(Dart_NewDouble(xpos));
  arguments[2] = HANDLE(Dart_NewDouble(ypos));
  HANDLE_INVOKE(Dart_InvokeClosure(dart_GLFWcursorposfun_cb, 3, arguments));
}
void glfwSetCursorPosCallback_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetCursorPosCallback_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);
  Dart_Handle new_GLFWcursorposfun_cb =
      HANDLE(Dart_GetNativeArgument(arguments, 1));
  new_GLFWcursorposfun_cb =
      HANDLE(Dart_NewPersistentHandle(new_GLFWcursorposfun_cb));
  Dart_Handle old_GLFWcursorposfun_cb = Dart_Null();
  if (dart_GLFWcursorposfun_cb != NULL) {
    old_GLFWcursorposfun_cb =
        HandleError(Dart_HandleFromPersistent(dart_GLFWcursorposfun_cb));
    Dart_DeletePersistentHandle(dart_GLFWcursorposfun_cb);
  }
  dart_GLFWcursorposfun_cb = new_GLFWcursorposfun_cb;
  glfwSetCursorPosCallback(window, _GLFWcursorposfun_cb);
  Dart_SetReturnValue(arguments, old_GLFWcursorposfun_cb);
  TRACE_END(glfwSetCursorPosCallback_);
}
static Dart_Handle dart_GLFWcursorenterfun_cb = NULL;

void _GLFWcursorenterfun_cb(GLFWwindow* window, int entered) {
  Dart_Handle arguments[2];
  arguments[0] = HANDLE(NewGLFWwindow(window));
  arguments[1] = HANDLE(Dart_NewBoolean(entered));
  HANDLE_INVOKE(Dart_InvokeClosure(dart_GLFWcursorenterfun_cb, 2, arguments));
}
void glfwSetCursorEnterCallback_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetCursorEnterCallback_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);
  Dart_Handle new_GLFWcursorenterfun_cb =
      HANDLE(Dart_GetNativeArgument(arguments, 1));
  new_GLFWcursorenterfun_cb =
      HANDLE(Dart_NewPersistentHandle(new_GLFWcursorenterfun_cb));
  Dart_Handle old_GLFWcursorenterfun_cb = Dart_Null();
  if (dart_GLFWcursorenterfun_cb != NULL) {
    old_GLFWcursorenterfun_cb =
        HandleError(Dart_HandleFromPersistent(dart_GLFWcursorenterfun_cb));
    Dart_DeletePersistentHandle(dart_GLFWcursorenterfun_cb);
  }
  dart_GLFWcursorenterfun_cb = new_GLFWcursorenterfun_cb;
  glfwSetCursorEnterCallback(window, _GLFWcursorenterfun_cb);
  Dart_SetReturnValue(arguments, old_GLFWcursorenterfun_cb);
  TRACE_END(glfwSetCursorEnterCallback_);
}
static Dart_Handle dart_GLFWscrollfun_cb = NULL;

void _GLFWscrollfun_cb(GLFWwindow* window, double xoffset, double yoffset) {
  Dart_Handle arguments[3];
  arguments[0] = HANDLE(NewGLFWwindow(window));
  arguments[1] = HANDLE(Dart_NewDouble(xoffset));
  arguments[2] = HANDLE(Dart_NewDouble(yoffset));
  HANDLE_INVOKE(Dart_InvokeClosure(dart_GLFWscrollfun_cb, 3, arguments));
}
void glfwSetScrollCallback_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetScrollCallback_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);
  Dart_Handle new_GLFWscrollfun_cb =
      HANDLE(Dart_GetNativeArgument(arguments, 1));
  new_GLFWscrollfun_cb = HANDLE(Dart_NewPersistentHandle(new_GLFWscrollfun_cb));
  Dart_Handle old_GLFWscrollfun_cb = Dart_Null();
  if (dart_GLFWscrollfun_cb != NULL) {
    old_GLFWscrollfun_cb =
        HandleError(Dart_HandleFromPersistent(dart_GLFWscrollfun_cb));
    Dart_DeletePersistentHandle(dart_GLFWscrollfun_cb);
  }
  dart_GLFWscrollfun_cb = new_GLFWscrollfun_cb;
  glfwSetScrollCallback(window, _GLFWscrollfun_cb);
  Dart_SetReturnValue(arguments, old_GLFWscrollfun_cb);
  TRACE_END(glfwSetScrollCallback_);
}
static Dart_Handle dart_GLFWdropfun_cb = NULL;

void _GLFWdropfun_cb(GLFWwindow* window, int count, const char** paths) {
  Dart_Handle arguments[3];
  arguments[0] = HANDLE(NewGLFWwindow(window));
  arguments[1] = HANDLE(Dart_NewInteger(count));
  arguments[2] = HANDLE(Dart_NewListOf(Dart_CoreType_String, count));
  for (int i = 0; i < count; i++) {
    HANDLE(
        Dart_ListSetAt(arguments[2], i, Dart_NewStringFromCString(paths[i])));
  }
  HANDLE_INVOKE(Dart_InvokeClosure(dart_GLFWscrollfun_cb, 3, arguments));
}

void glfwSetDropCallback_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetDropCallback_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);
  Dart_Handle new_GLFWdropfun_cb = HANDLE(Dart_GetNativeArgument(arguments, 1));
  new_GLFWdropfun_cb = HANDLE(Dart_NewPersistentHandle(new_GLFWdropfun_cb));
  Dart_Handle old_GLFWdropfun_cb = Dart_Null();
  if (dart_GLFWdropfun_cb != NULL) {
    old_GLFWdropfun_cb =
        HandleError(Dart_HandleFromPersistent(dart_GLFWdropfun_cb));
    Dart_DeletePersistentHandle(dart_GLFWdropfun_cb);
  }
  dart_GLFWdropfun_cb = new_GLFWdropfun_cb;
  glfwSetDropCallback(window, _GLFWdropfun_cb);
  Dart_SetReturnValue(arguments, old_GLFWdropfun_cb);
  TRACE_END(glfwSetDropCallback_);
}
void glfwJoystickPresent_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwJoystickPresent_);
  int64_t joy;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 0, &joy));

  int ret = glfwJoystickPresent(joy);
  Dart_SetBooleanReturnValue(arguments, ret);
  TRACE_END(glfwJoystickPresent_);
}

void glfwGetJoystickName_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwGetJoystickName_);
  int64_t joy;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 0, &joy));

  const char* ret = glfwGetJoystickName(joy);
  Dart_SetReturnValue(arguments, HANDLE(Dart_NewStringFromCString(ret)));
  TRACE_END(glfwGetJoystickName_);
}

static Dart_Handle dart_GLFWjoystickfun_cb = NULL;

void _GLFWjoystickfun_cb(int joy, int event) {
  Dart_Handle arguments[2];
  arguments[0] = HANDLE(Dart_NewInteger(joy));
  arguments[1] = HANDLE(Dart_NewInteger(event));
  HANDLE_INVOKE(Dart_InvokeClosure(dart_GLFWjoystickfun_cb, 2, arguments));
}
void glfwSetJoystickCallback_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetJoystickCallback_);
  Dart_Handle new_GLFWjoystickfun_cb =
      HANDLE(Dart_GetNativeArgument(arguments, 0));
  new_GLFWjoystickfun_cb =
      HANDLE(Dart_NewPersistentHandle(new_GLFWjoystickfun_cb));
  Dart_Handle old_GLFWjoystickfun_cb = Dart_Null();
  if (dart_GLFWjoystickfun_cb != NULL) {
    old_GLFWjoystickfun_cb =
        HandleError(Dart_HandleFromPersistent(dart_GLFWjoystickfun_cb));
    Dart_DeletePersistentHandle(dart_GLFWjoystickfun_cb);
  }
  dart_GLFWjoystickfun_cb = new_GLFWjoystickfun_cb;
  glfwSetJoystickCallback(_GLFWjoystickfun_cb);
  Dart_SetReturnValue(arguments, old_GLFWjoystickfun_cb);
  TRACE_END(glfwSetJoystickCallback_);
}
void glfwSetClipboardString_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetClipboardString_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);

  void* string_peer = NULL;
  Dart_Handle string_arg =
      HANDLE(Dart_GetNativeStringArgument(arguments, 1, (void**)&string_peer));
  const char* string = NULL;
  HANDLE(Dart_StringToCString(string_arg, &string));

  glfwSetClipboardString(window, string);

  TRACE_END(glfwSetClipboardString_);
}

void glfwGetClipboardString_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwGetClipboardString_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);

  const char* ret = glfwGetClipboardString(window);
  Dart_SetReturnValue(arguments, HANDLE(Dart_NewStringFromCString(ret)));
  TRACE_END(glfwGetClipboardString_);
}

void glfwGetTime_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwGetTime_);
  double ret = glfwGetTime();
  Dart_SetDoubleReturnValue(arguments, ret);
  TRACE_END(glfwGetTime_);
}

void glfwSetTime_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSetTime_);
  double time;
  HANDLE(Dart_GetNativeDoubleArgument(arguments, 0, &time));

  glfwSetTime(time);

  TRACE_END(glfwSetTime_);
}

void glfwGetTimerValue_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwGetTimerValue_);
  uint64_t ret = glfwGetTimerValue();
  Dart_SetIntegerReturnValue(arguments, ret);
  TRACE_END(glfwGetTimerValue_);
}

void glfwGetTimerFrequency_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwGetTimerFrequency_);
  uint64_t ret = glfwGetTimerFrequency();
  Dart_SetIntegerReturnValue(arguments, ret);
  TRACE_END(glfwGetTimerFrequency_);
}

void glfwMakeContextCurrent_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwMakeContextCurrent_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);

  glfwMakeContextCurrent(window);

  TRACE_END(glfwMakeContextCurrent_);
}

void glfwGetCurrentContext_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwGetCurrentContext_);
  GLFWwindow* ret = glfwGetCurrentContext();
  Dart_SetReturnValue(arguments, HANDLE(NewGLFWwindow(ret)));
  TRACE_END(glfwGetCurrentContext_);
}

void glfwSwapBuffers_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSwapBuffers_);
  Dart_Handle window_obj = HANDLE(Dart_GetNativeArgument(arguments, 0));
  GLFWwindow* window = GetNativePointer<GLFWwindow>(window_obj);

  glfwSwapBuffers(window);

  TRACE_END(glfwSwapBuffers_);
}

void glfwSwapInterval_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwSwapInterval_);
  int64_t interval;
  HANDLE(Dart_GetNativeIntegerArgument(arguments, 0, &interval));

  glfwSwapInterval(interval);

  TRACE_END(glfwSwapInterval_);
}

void glfwExtensionSupported_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwExtensionSupported_);
  void* extension_peer = NULL;
  Dart_Handle extension_arg = HANDLE(
      Dart_GetNativeStringArgument(arguments, 0, (void**)&extension_peer));
  const char* extension = NULL;
  HANDLE(Dart_StringToCString(extension_arg, &extension));

  int ret = glfwExtensionSupported(extension);
  Dart_SetBooleanReturnValue(arguments, ret);
  TRACE_END(glfwExtensionSupported_);
}

void glfwVulkanSupported_native(Dart_NativeArguments arguments) {
  TRACE_START(glfwVulkanSupported_);
  int ret = glfwVulkanSupported();
  Dart_SetIntegerReturnValue(arguments, ret);
  TRACE_END(glfwVulkanSupported_);
}
