// Copyright (c) 2015, the Dart GLFW extension authors. All rights reserved.
// Please see the AUTHORS file for details. Use of this source code is governed
// by a BSD-style license that can be found in the LICENSE file or at
// https://developers.google.com/open-source/licenses/bsd

// This file is auto-generated by scripts in the tools/ directory.
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include "GLFW/glfw3.h"
#include "dart_api.h"


#include "../instantiate_glfw_classes.h"
#include "../util.h"
#include "glfw_bindings.h"

// Generated GLFW function bindings for Dart.

void glfwInit_native(Dart_NativeArguments arguments) {
  int ret = glfwInit();
  Dart_SetReturnValue(arguments, HandleError(Dart_NewBoolean(ret)));
}

void glfwTerminate_native(Dart_NativeArguments arguments) {
  glfwTerminate();
}

void glfwGetVersionString_native(Dart_NativeArguments arguments) {
  const char* ret = glfwGetVersionString();
  Dart_SetReturnValue(arguments, HandleError(Dart_NewStringFromCString(ret)));
}

static Dart_Handle dart_GLFWerrorfun_cb = NULL;

void _GLFWerrorfun_cb(int error, const char* description) {
  Dart_Handle arguments[2];
  arguments[0] = HandleError(Dart_NewInteger(error));
  arguments[1] = HandleError(Dart_NewStringFromCString(description));
  HandleError(Dart_InvokeClosure(dart_GLFWerrorfun_cb, 2, arguments));
}
void glfwSetErrorCallback_native(Dart_NativeArguments arguments) {
  Dart_Handle new_GLFWerrorfun_cb = HandleError(Dart_GetNativeArgument(arguments, 0));
  new_GLFWerrorfun_cb = HandleError(Dart_NewPersistentHandle(new_GLFWerrorfun_cb));
  Dart_Handle old_GLFWerrorfun_cb = Dart_Null();
  if (dart_GLFWerrorfun_cb != NULL) {
    old_GLFWerrorfun_cb = HandleError(Dart_HandleFromPersistent(dart_GLFWerrorfun_cb));
    Dart_DeletePersistentHandle(dart_GLFWerrorfun_cb);
  }
  dart_GLFWerrorfun_cb = new_GLFWerrorfun_cb;
  glfwSetErrorCallback(_GLFWerrorfun_cb);
  Dart_SetReturnValue(arguments, old_GLFWerrorfun_cb);
}

void glfwGetPrimaryMonitor_native(Dart_NativeArguments arguments) {
  GLFWmonitor* ret = glfwGetPrimaryMonitor();
  Dart_SetReturnValue(arguments, HandleError(NewGLFWmonitor(ret)));
}

void glfwGetMonitorName_native(Dart_NativeArguments arguments) {
  Dart_Handle monitor_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWmonitor* monitor = NULL;
  if (!Dart_IsNull(monitor_obj)) {
    HandleError(Dart_GetNativeInstanceField(monitor_obj, 0, reinterpret_cast<intptr_t *>(&monitor)));
  }

  const char* ret = glfwGetMonitorName(monitor);
  Dart_SetReturnValue(arguments, HandleError(Dart_NewStringFromCString(ret)));
}

static Dart_Handle dart_GLFWmonitorfun_cb = NULL;

void _GLFWmonitorfun_cb(GLFWmonitor* monitor, int event) {
  Dart_Handle arguments[2];
  arguments[0] = HandleError(NewGLFWmonitor(monitor));
  arguments[1] = HandleError(Dart_NewInteger(event));
  HandleError(Dart_InvokeClosure(dart_GLFWmonitorfun_cb, 2, arguments));
}
void glfwSetMonitorCallback_native(Dart_NativeArguments arguments) {
  Dart_Handle new_GLFWmonitorfun_cb = HandleError(Dart_GetNativeArgument(arguments, 0));
  new_GLFWmonitorfun_cb = HandleError(Dart_NewPersistentHandle(new_GLFWmonitorfun_cb));
  Dart_Handle old_GLFWmonitorfun_cb = Dart_Null();
  if (dart_GLFWmonitorfun_cb != NULL) {
    old_GLFWmonitorfun_cb = HandleError(Dart_HandleFromPersistent(dart_GLFWmonitorfun_cb));
    Dart_DeletePersistentHandle(dart_GLFWmonitorfun_cb);
  }
  dart_GLFWmonitorfun_cb = new_GLFWmonitorfun_cb;
  glfwSetMonitorCallback(_GLFWmonitorfun_cb);
  Dart_SetReturnValue(arguments, old_GLFWmonitorfun_cb);
}

void glfwGetVideoMode_native(Dart_NativeArguments arguments) {
  Dart_Handle monitor_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWmonitor* monitor = NULL;
  if (!Dart_IsNull(monitor_obj)) {
    HandleError(Dart_GetNativeInstanceField(monitor_obj, 0, reinterpret_cast<intptr_t *>(&monitor)));
  }

  const GLFWvidmode* ret = glfwGetVideoMode(monitor);
  Dart_SetReturnValue(arguments, HandleError(NewGLFWvidmode(ret)));
}

void glfwSetGamma_native(Dart_NativeArguments arguments) {
  Dart_Handle monitor_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWmonitor* monitor = NULL;
  if (!Dart_IsNull(monitor_obj)) {
    HandleError(Dart_GetNativeInstanceField(monitor_obj, 0, reinterpret_cast<intptr_t *>(&monitor)));
  }

  Dart_Handle gamma_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  double gamma = 0.0;
  if (Dart_IsDouble(gamma_obj)) {
    HandleError(Dart_DoubleValue(gamma_obj, &gamma));
  }

  glfwSetGamma(monitor, gamma);
}

void glfwGetGammaRamp_native(Dart_NativeArguments arguments) {
  Dart_Handle monitor_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWmonitor* monitor = NULL;
  if (!Dart_IsNull(monitor_obj)) {
    HandleError(Dart_GetNativeInstanceField(monitor_obj, 0, reinterpret_cast<intptr_t *>(&monitor)));
  }

  const GLFWgammaramp* ret = glfwGetGammaRamp(monitor);
  Dart_SetReturnValue(arguments, HandleError(NewGLFWgammaramp(ret)));
}

void glfwSetGammaRamp_native(Dart_NativeArguments arguments) {
  Dart_Handle monitor_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWmonitor* monitor = NULL;
  if (!Dart_IsNull(monitor_obj)) {
    HandleError(Dart_GetNativeInstanceField(monitor_obj, 0, reinterpret_cast<intptr_t *>(&monitor)));
  }

  Dart_Handle ramp_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  GLFWgammaramp* ramp = NULL;
  if (!Dart_IsNull(ramp_obj)) {
    ramp = NewGLFWgammarampFromDart(ramp_obj);
  }

  glfwSetGammaRamp(monitor, ramp);
  if (ramp != NULL) {
    free(ramp->red);
    free(ramp->green);
    free(ramp->blue);
    free(ramp);
  }

}

void glfwDefaultWindowHints_native(Dart_NativeArguments arguments) {
  glfwDefaultWindowHints();
}

void glfwWindowHint_native(Dart_NativeArguments arguments) {
  Dart_Handle hint_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t hint = 0;
  if (Dart_IsInteger(hint_obj)) {
    HandleError(Dart_IntegerToInt64(hint_obj, &hint));
  }

  Dart_Handle value_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t value = 0;
  if (Dart_IsInteger(value_obj)) {
    HandleError(Dart_IntegerToInt64(value_obj, &value));
  }

  glfwWindowHint(hint, value);
}

void glfwCreateWindow_native(Dart_NativeArguments arguments) {
  Dart_Handle width_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t width = 0;
  if (Dart_IsInteger(width_obj)) {
    HandleError(Dart_IntegerToInt64(width_obj, &width));
  }

  Dart_Handle height_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t height = 0;
  if (Dart_IsInteger(height_obj)) {
    HandleError(Dart_IntegerToInt64(height_obj, &height));
  }

  Dart_Handle title_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  const char* title = NULL;
  if (Dart_IsString(title_obj)) {
    HandleError(Dart_StringToCString(title_obj, &title));
  }

  Dart_Handle monitor_obj = HandleError(Dart_GetNativeArgument(arguments, 3));

  GLFWmonitor* monitor = NULL;
  if (!Dart_IsNull(monitor_obj)) {
    HandleError(Dart_GetNativeInstanceField(monitor_obj, 0, reinterpret_cast<intptr_t *>(&monitor)));
  }

  Dart_Handle share_obj = HandleError(Dart_GetNativeArgument(arguments, 4));

  GLFWwindow* share = NULL;
  if (!Dart_IsNull(share_obj)) {
    HandleError(Dart_GetNativeInstanceField(share_obj, 0, reinterpret_cast<intptr_t *>(&share)));
  }

  GLFWwindow* ret = glfwCreateWindow(width, height, title, monitor, share);
  Dart_SetReturnValue(arguments, HandleError(NewGLFWwindow(ret)));
}

void glfwDestroyWindow_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  glfwDestroyWindow(window);
}

void glfwWindowShouldClose_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  int ret = glfwWindowShouldClose(window);
  Dart_SetReturnValue(arguments, HandleError(Dart_NewInteger(ret)));
}

void glfwSetWindowShouldClose_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle value_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t value = 0;
  if (Dart_IsInteger(value_obj)) {
    HandleError(Dart_IntegerToInt64(value_obj, &value));
  }

  glfwSetWindowShouldClose(window, value);
}

void glfwSetWindowTitle_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle title_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  const char* title = NULL;
  if (Dart_IsString(title_obj)) {
    HandleError(Dart_StringToCString(title_obj, &title));
  }

  glfwSetWindowTitle(window, title);
}

void glfwSetWindowIcon_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle count_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t count = 0;
  if (Dart_IsInteger(count_obj)) {
    HandleError(Dart_IntegerToInt64(count_obj, &count));
  }

  Dart_Handle images_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  GLFWimage* images = NULL;
  if (!Dart_IsNull(images_obj)) {
    images = NewGLFWimageFromDart(images_obj);
  }

  glfwSetWindowIcon(window, count, images);
  if (images != NULL) {
    free(images->pixels);
    free(images);
  }

}

void glfwSetWindowPos_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle xpos_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t xpos = 0;
  if (Dart_IsInteger(xpos_obj)) {
    HandleError(Dart_IntegerToInt64(xpos_obj, &xpos));
  }

  Dart_Handle ypos_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t ypos = 0;
  if (Dart_IsInteger(ypos_obj)) {
    HandleError(Dart_IntegerToInt64(ypos_obj, &ypos));
  }

  glfwSetWindowPos(window, xpos, ypos);
}

void glfwSetWindowSizeLimits_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle minwidth_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t minwidth = 0;
  if (Dart_IsInteger(minwidth_obj)) {
    HandleError(Dart_IntegerToInt64(minwidth_obj, &minwidth));
  }

  Dart_Handle minheight_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t minheight = 0;
  if (Dart_IsInteger(minheight_obj)) {
    HandleError(Dart_IntegerToInt64(minheight_obj, &minheight));
  }

  Dart_Handle maxwidth_obj = HandleError(Dart_GetNativeArgument(arguments, 3));

  int64_t maxwidth = 0;
  if (Dart_IsInteger(maxwidth_obj)) {
    HandleError(Dart_IntegerToInt64(maxwidth_obj, &maxwidth));
  }

  Dart_Handle maxheight_obj = HandleError(Dart_GetNativeArgument(arguments, 4));

  int64_t maxheight = 0;
  if (Dart_IsInteger(maxheight_obj)) {
    HandleError(Dart_IntegerToInt64(maxheight_obj, &maxheight));
  }

  glfwSetWindowSizeLimits(window, minwidth, minheight, maxwidth, maxheight);
}

void glfwSetWindowAspectRatio_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle numer_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t numer = 0;
  if (Dart_IsInteger(numer_obj)) {
    HandleError(Dart_IntegerToInt64(numer_obj, &numer));
  }

  Dart_Handle denom_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t denom = 0;
  if (Dart_IsInteger(denom_obj)) {
    HandleError(Dart_IntegerToInt64(denom_obj, &denom));
  }

  glfwSetWindowAspectRatio(window, numer, denom);
}

void glfwSetWindowSize_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle width_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t width = 0;
  if (Dart_IsInteger(width_obj)) {
    HandleError(Dart_IntegerToInt64(width_obj, &width));
  }

  Dart_Handle height_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t height = 0;
  if (Dart_IsInteger(height_obj)) {
    HandleError(Dart_IntegerToInt64(height_obj, &height));
  }

  glfwSetWindowSize(window, width, height);
}

void glfwIconifyWindow_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  glfwIconifyWindow(window);
}

void glfwRestoreWindow_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  glfwRestoreWindow(window);
}

void glfwMaximizeWindow_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  glfwMaximizeWindow(window);
}

void glfwShowWindow_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  glfwShowWindow(window);
}

void glfwHideWindow_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  glfwHideWindow(window);
}

void glfwFocusWindow_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  glfwFocusWindow(window);
}

void glfwGetWindowMonitor_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  GLFWmonitor* ret = glfwGetWindowMonitor(window);
  Dart_SetReturnValue(arguments, HandleError(NewGLFWmonitor(ret)));
}

void glfwSetWindowMonitor_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle monitor_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  GLFWmonitor* monitor = NULL;
  if (!Dart_IsNull(monitor_obj)) {
    HandleError(Dart_GetNativeInstanceField(monitor_obj, 0, reinterpret_cast<intptr_t *>(&monitor)));
  }

  Dart_Handle xpos_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t xpos = 0;
  if (Dart_IsInteger(xpos_obj)) {
    HandleError(Dart_IntegerToInt64(xpos_obj, &xpos));
  }

  Dart_Handle ypos_obj = HandleError(Dart_GetNativeArgument(arguments, 3));

  int64_t ypos = 0;
  if (Dart_IsInteger(ypos_obj)) {
    HandleError(Dart_IntegerToInt64(ypos_obj, &ypos));
  }

  Dart_Handle width_obj = HandleError(Dart_GetNativeArgument(arguments, 4));

  int64_t width = 0;
  if (Dart_IsInteger(width_obj)) {
    HandleError(Dart_IntegerToInt64(width_obj, &width));
  }

  Dart_Handle height_obj = HandleError(Dart_GetNativeArgument(arguments, 5));

  int64_t height = 0;
  if (Dart_IsInteger(height_obj)) {
    HandleError(Dart_IntegerToInt64(height_obj, &height));
  }

  Dart_Handle refreshRate_obj = HandleError(Dart_GetNativeArgument(arguments, 6));

  int64_t refreshRate = 0;
  if (Dart_IsInteger(refreshRate_obj)) {
    HandleError(Dart_IntegerToInt64(refreshRate_obj, &refreshRate));
  }

  glfwSetWindowMonitor(window, monitor, xpos, ypos, width, height, refreshRate);
}

void glfwGetWindowAttrib_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle attrib_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t attrib = 0;
  if (Dart_IsInteger(attrib_obj)) {
    HandleError(Dart_IntegerToInt64(attrib_obj, &attrib));
  }

  int ret = glfwGetWindowAttrib(window, attrib);
  Dart_SetReturnValue(arguments, HandleError(Dart_NewInteger(ret)));
}

static Dart_Handle dart_GLFWwindowposfun_cb = NULL;

void _GLFWwindowposfun_cb(GLFWwindow* window, int xpos, int ypos) {
  Dart_Handle arguments[3];
  arguments[0] = HandleError(NewGLFWwindow(window));
  arguments[1] = HandleError(Dart_NewInteger(xpos));
  arguments[2] = HandleError(Dart_NewInteger(ypos));
  HandleError(Dart_InvokeClosure(dart_GLFWwindowposfun_cb, 3, arguments));
}
void glfwSetWindowPosCallback_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle new_GLFWwindowposfun_cb = HandleError(Dart_GetNativeArgument(arguments, 1));
  new_GLFWwindowposfun_cb = HandleError(Dart_NewPersistentHandle(new_GLFWwindowposfun_cb));
  Dart_Handle old_GLFWwindowposfun_cb = Dart_Null();
  if (dart_GLFWwindowposfun_cb != NULL) {
    old_GLFWwindowposfun_cb = HandleError(Dart_HandleFromPersistent(dart_GLFWwindowposfun_cb));
    Dart_DeletePersistentHandle(dart_GLFWwindowposfun_cb);
  }
  dart_GLFWwindowposfun_cb = new_GLFWwindowposfun_cb;
  glfwSetWindowPosCallback(window, _GLFWwindowposfun_cb);
  Dart_SetReturnValue(arguments, old_GLFWwindowposfun_cb);
}

static Dart_Handle dart_GLFWwindowsizefun_cb = NULL;

void _GLFWwindowsizefun_cb(GLFWwindow* window, int width, int height) {
  Dart_Handle arguments[3];
  arguments[0] = HandleError(NewGLFWwindow(window));
  arguments[1] = HandleError(Dart_NewInteger(width));
  arguments[2] = HandleError(Dart_NewInteger(height));
  HandleError(Dart_InvokeClosure(dart_GLFWwindowsizefun_cb, 3, arguments));
}
void glfwSetWindowSizeCallback_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle new_GLFWwindowsizefun_cb = HandleError(Dart_GetNativeArgument(arguments, 1));
  new_GLFWwindowsizefun_cb = HandleError(Dart_NewPersistentHandle(new_GLFWwindowsizefun_cb));
  Dart_Handle old_GLFWwindowsizefun_cb = Dart_Null();
  if (dart_GLFWwindowsizefun_cb != NULL) {
    old_GLFWwindowsizefun_cb = HandleError(Dart_HandleFromPersistent(dart_GLFWwindowsizefun_cb));
    Dart_DeletePersistentHandle(dart_GLFWwindowsizefun_cb);
  }
  dart_GLFWwindowsizefun_cb = new_GLFWwindowsizefun_cb;
  glfwSetWindowSizeCallback(window, _GLFWwindowsizefun_cb);
  Dart_SetReturnValue(arguments, old_GLFWwindowsizefun_cb);
}

static Dart_Handle dart_GLFWwindowclosefun_cb = NULL;

void _GLFWwindowclosefun_cb(GLFWwindow* window) {
  Dart_Handle arguments[1];
  arguments[0] = HandleError(NewGLFWwindow(window));
  HandleError(Dart_InvokeClosure(dart_GLFWwindowclosefun_cb, 1, arguments));
}
void glfwSetWindowCloseCallback_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle new_GLFWwindowclosefun_cb = HandleError(Dart_GetNativeArgument(arguments, 1));
  new_GLFWwindowclosefun_cb = HandleError(Dart_NewPersistentHandle(new_GLFWwindowclosefun_cb));
  Dart_Handle old_GLFWwindowclosefun_cb = Dart_Null();
  if (dart_GLFWwindowclosefun_cb != NULL) {
    old_GLFWwindowclosefun_cb = HandleError(Dart_HandleFromPersistent(dart_GLFWwindowclosefun_cb));
    Dart_DeletePersistentHandle(dart_GLFWwindowclosefun_cb);
  }
  dart_GLFWwindowclosefun_cb = new_GLFWwindowclosefun_cb;
  glfwSetWindowCloseCallback(window, _GLFWwindowclosefun_cb);
  Dart_SetReturnValue(arguments, old_GLFWwindowclosefun_cb);
}

static Dart_Handle dart_GLFWwindowrefreshfun_cb = NULL;

void _GLFWwindowrefreshfun_cb(GLFWwindow* window) {
  Dart_Handle arguments[1];
  arguments[0] = HandleError(NewGLFWwindow(window));
  HandleError(Dart_InvokeClosure(dart_GLFWwindowrefreshfun_cb, 1, arguments));
}
void glfwSetWindowRefreshCallback_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle new_GLFWwindowrefreshfun_cb = HandleError(Dart_GetNativeArgument(arguments, 1));
  new_GLFWwindowrefreshfun_cb = HandleError(Dart_NewPersistentHandle(new_GLFWwindowrefreshfun_cb));
  Dart_Handle old_GLFWwindowrefreshfun_cb = Dart_Null();
  if (dart_GLFWwindowrefreshfun_cb != NULL) {
    old_GLFWwindowrefreshfun_cb = HandleError(Dart_HandleFromPersistent(dart_GLFWwindowrefreshfun_cb));
    Dart_DeletePersistentHandle(dart_GLFWwindowrefreshfun_cb);
  }
  dart_GLFWwindowrefreshfun_cb = new_GLFWwindowrefreshfun_cb;
  glfwSetWindowRefreshCallback(window, _GLFWwindowrefreshfun_cb);
  Dart_SetReturnValue(arguments, old_GLFWwindowrefreshfun_cb);
}

static Dart_Handle dart_GLFWwindowfocusfun_cb = NULL;

void _GLFWwindowfocusfun_cb(GLFWwindow* window, int focused) {
  Dart_Handle arguments[2];
  arguments[0] = HandleError(NewGLFWwindow(window));
  arguments[1] = HandleError(Dart_NewBoolean(focused));
  HandleError(Dart_InvokeClosure(dart_GLFWwindowfocusfun_cb, 2, arguments));
}
void glfwSetWindowFocusCallback_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle new_GLFWwindowfocusfun_cb = HandleError(Dart_GetNativeArgument(arguments, 1));
  new_GLFWwindowfocusfun_cb = HandleError(Dart_NewPersistentHandle(new_GLFWwindowfocusfun_cb));
  Dart_Handle old_GLFWwindowfocusfun_cb = Dart_Null();
  if (dart_GLFWwindowfocusfun_cb != NULL) {
    old_GLFWwindowfocusfun_cb = HandleError(Dart_HandleFromPersistent(dart_GLFWwindowfocusfun_cb));
    Dart_DeletePersistentHandle(dart_GLFWwindowfocusfun_cb);
  }
  dart_GLFWwindowfocusfun_cb = new_GLFWwindowfocusfun_cb;
  glfwSetWindowFocusCallback(window, _GLFWwindowfocusfun_cb);
  Dart_SetReturnValue(arguments, old_GLFWwindowfocusfun_cb);
}

static Dart_Handle dart_GLFWwindowiconifyfun_cb = NULL;

void _GLFWwindowiconifyfun_cb(GLFWwindow* window, int iconified) {
  Dart_Handle arguments[2];
  arguments[0] = HandleError(NewGLFWwindow(window));
  arguments[1] = HandleError(Dart_NewBoolean(iconified));
  HandleError(Dart_InvokeClosure(dart_GLFWwindowiconifyfun_cb, 2, arguments));
}
void glfwSetWindowIconifyCallback_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle new_GLFWwindowiconifyfun_cb = HandleError(Dart_GetNativeArgument(arguments, 1));
  new_GLFWwindowiconifyfun_cb = HandleError(Dart_NewPersistentHandle(new_GLFWwindowiconifyfun_cb));
  Dart_Handle old_GLFWwindowiconifyfun_cb = Dart_Null();
  if (dart_GLFWwindowiconifyfun_cb != NULL) {
    old_GLFWwindowiconifyfun_cb = HandleError(Dart_HandleFromPersistent(dart_GLFWwindowiconifyfun_cb));
    Dart_DeletePersistentHandle(dart_GLFWwindowiconifyfun_cb);
  }
  dart_GLFWwindowiconifyfun_cb = new_GLFWwindowiconifyfun_cb;
  glfwSetWindowIconifyCallback(window, _GLFWwindowiconifyfun_cb);
  Dart_SetReturnValue(arguments, old_GLFWwindowiconifyfun_cb);
}

static Dart_Handle dart_GLFWframebuffersizefun_cb = NULL;

void _GLFWframebuffersizefun_cb(GLFWwindow* window, int width, int height) {
  Dart_Handle arguments[3];
  arguments[0] = HandleError(NewGLFWwindow(window));
  arguments[1] = HandleError(Dart_NewInteger(width));
  arguments[2] = HandleError(Dart_NewInteger(height));
  HandleError(Dart_InvokeClosure(dart_GLFWframebuffersizefun_cb, 3, arguments));
}
void glfwSetFramebufferSizeCallback_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle new_GLFWframebuffersizefun_cb = HandleError(Dart_GetNativeArgument(arguments, 1));
  new_GLFWframebuffersizefun_cb = HandleError(Dart_NewPersistentHandle(new_GLFWframebuffersizefun_cb));
  Dart_Handle old_GLFWframebuffersizefun_cb = Dart_Null();
  if (dart_GLFWframebuffersizefun_cb != NULL) {
    old_GLFWframebuffersizefun_cb = HandleError(Dart_HandleFromPersistent(dart_GLFWframebuffersizefun_cb));
    Dart_DeletePersistentHandle(dart_GLFWframebuffersizefun_cb);
  }
  dart_GLFWframebuffersizefun_cb = new_GLFWframebuffersizefun_cb;
  glfwSetFramebufferSizeCallback(window, _GLFWframebuffersizefun_cb);
  Dart_SetReturnValue(arguments, old_GLFWframebuffersizefun_cb);
}

void glfwPollEvents_native(Dart_NativeArguments arguments) {
  glfwPollEvents();
}

void glfwWaitEvents_native(Dart_NativeArguments arguments) {
  glfwWaitEvents();
}

void glfwWaitEventsTimeout_native(Dart_NativeArguments arguments) {
  Dart_Handle timeout_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  double timeout = 0.0;
  if (Dart_IsDouble(timeout_obj)) {
    HandleError(Dart_DoubleValue(timeout_obj, &timeout));
  }

  glfwWaitEventsTimeout(timeout);
}

void glfwPostEmptyEvent_native(Dart_NativeArguments arguments) {
  glfwPostEmptyEvent();
}

void glfwGetInputMode_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle mode_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t mode = 0;
  if (Dart_IsInteger(mode_obj)) {
    HandleError(Dart_IntegerToInt64(mode_obj, &mode));
  }

  int ret = glfwGetInputMode(window, mode);
  Dart_SetReturnValue(arguments, HandleError(Dart_NewInteger(ret)));
}

void glfwSetInputMode_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle mode_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t mode = 0;
  if (Dart_IsInteger(mode_obj)) {
    HandleError(Dart_IntegerToInt64(mode_obj, &mode));
  }

  Dart_Handle value_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t value = 0;
  if (Dart_IsInteger(value_obj)) {
    HandleError(Dart_IntegerToInt64(value_obj, &value));
  }

  glfwSetInputMode(window, mode, value);
}

void glfwGetKeyName_native(Dart_NativeArguments arguments) {
  Dart_Handle key_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t key = 0;
  if (Dart_IsInteger(key_obj)) {
    HandleError(Dart_IntegerToInt64(key_obj, &key));
  }

  Dart_Handle scancode_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t scancode = 0;
  if (Dart_IsInteger(scancode_obj)) {
    HandleError(Dart_IntegerToInt64(scancode_obj, &scancode));
  }

  const char* ret = glfwGetKeyName(key, scancode);
  Dart_SetReturnValue(arguments, HandleError(Dart_NewStringFromCString(ret)));
}

void glfwGetKey_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle key_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t key = 0;
  if (Dart_IsInteger(key_obj)) {
    HandleError(Dart_IntegerToInt64(key_obj, &key));
  }

  int ret = glfwGetKey(window, key);
  Dart_SetReturnValue(arguments, HandleError(Dart_NewInteger(ret)));
}

void glfwGetMouseButton_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle button_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t button = 0;
  if (Dart_IsInteger(button_obj)) {
    HandleError(Dart_IntegerToInt64(button_obj, &button));
  }

  int ret = glfwGetMouseButton(window, button);
  Dart_SetReturnValue(arguments, HandleError(Dart_NewInteger(ret)));
}

void glfwSetCursorPos_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle xpos_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  double xpos = 0.0;
  if (Dart_IsDouble(xpos_obj)) {
    HandleError(Dart_DoubleValue(xpos_obj, &xpos));
  }

  Dart_Handle ypos_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  double ypos = 0.0;
  if (Dart_IsDouble(ypos_obj)) {
    HandleError(Dart_DoubleValue(ypos_obj, &ypos));
  }

  glfwSetCursorPos(window, xpos, ypos);
}

void glfwCreateCursor_native(Dart_NativeArguments arguments) {
  Dart_Handle image_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWimage* image = NULL;
  if (!Dart_IsNull(image_obj)) {
    image = NewGLFWimageFromDart(image_obj);
  }

  Dart_Handle xhot_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  int64_t xhot = 0;
  if (Dart_IsInteger(xhot_obj)) {
    HandleError(Dart_IntegerToInt64(xhot_obj, &xhot));
  }

  Dart_Handle yhot_obj = HandleError(Dart_GetNativeArgument(arguments, 2));

  int64_t yhot = 0;
  if (Dart_IsInteger(yhot_obj)) {
    HandleError(Dart_IntegerToInt64(yhot_obj, &yhot));
  }

  GLFWcursor* ret = glfwCreateCursor(image, xhot, yhot);
  Dart_SetReturnValue(arguments, HandleError(NewGLFWcursor(ret)));
  if (image != NULL) {
    free(image->pixels);
    free(image);
  }

}

void glfwCreateStandardCursor_native(Dart_NativeArguments arguments) {
  Dart_Handle shape_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t shape = 0;
  if (Dart_IsInteger(shape_obj)) {
    HandleError(Dart_IntegerToInt64(shape_obj, &shape));
  }

  GLFWcursor* ret = glfwCreateStandardCursor(shape);
  Dart_SetReturnValue(arguments, HandleError(NewGLFWcursor(ret)));
}

void glfwDestroyCursor_native(Dart_NativeArguments arguments) {
  Dart_Handle cursor_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWcursor* cursor = NULL;
  if (!Dart_IsNull(cursor_obj)) {
    HandleError(Dart_GetNativeInstanceField(cursor_obj, 0, reinterpret_cast<intptr_t *>(&cursor)));
  }

  glfwDestroyCursor(cursor);
}

void glfwSetCursor_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle cursor_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  GLFWcursor* cursor = NULL;
  if (!Dart_IsNull(cursor_obj)) {
    HandleError(Dart_GetNativeInstanceField(cursor_obj, 0, reinterpret_cast<intptr_t *>(&cursor)));
  }

  glfwSetCursor(window, cursor);
}

static Dart_Handle dart_GLFWkeyfun_cb = NULL;

void _GLFWkeyfun_cb(GLFWwindow* window, int key, int scancode, int action, int mods) {
  Dart_Handle arguments[5];
  arguments[0] = HandleError(NewGLFWwindow(window));
  arguments[1] = HandleError(Dart_NewInteger(key));
  arguments[2] = HandleError(Dart_NewInteger(scancode));
  arguments[3] = HandleError(Dart_NewInteger(action));
  arguments[4] = HandleError(Dart_NewInteger(mods));
  HandleError(Dart_InvokeClosure(dart_GLFWkeyfun_cb, 5, arguments));
}
void glfwSetKeyCallback_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle new_GLFWkeyfun_cb = HandleError(Dart_GetNativeArgument(arguments, 1));
  new_GLFWkeyfun_cb = HandleError(Dart_NewPersistentHandle(new_GLFWkeyfun_cb));
  Dart_Handle old_GLFWkeyfun_cb = Dart_Null();
  if (dart_GLFWkeyfun_cb != NULL) {
    old_GLFWkeyfun_cb = HandleError(Dart_HandleFromPersistent(dart_GLFWkeyfun_cb));
    Dart_DeletePersistentHandle(dart_GLFWkeyfun_cb);
  }
  dart_GLFWkeyfun_cb = new_GLFWkeyfun_cb;
  glfwSetKeyCallback(window, _GLFWkeyfun_cb);
  Dart_SetReturnValue(arguments, old_GLFWkeyfun_cb);
}

static Dart_Handle dart_GLFWcharfun_cb = NULL;

void _GLFWcharfun_cb(GLFWwindow* window, unsigned int codepoint) {
  Dart_Handle arguments[2];
  arguments[0] = HandleError(NewGLFWwindow(window));
  arguments[1] = HandleError(Dart_NewInteger(codepoint));
  HandleError(Dart_InvokeClosure(dart_GLFWcharfun_cb, 2, arguments));
}
void glfwSetCharCallback_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle new_GLFWcharfun_cb = HandleError(Dart_GetNativeArgument(arguments, 1));
  new_GLFWcharfun_cb = HandleError(Dart_NewPersistentHandle(new_GLFWcharfun_cb));
  Dart_Handle old_GLFWcharfun_cb = Dart_Null();
  if (dart_GLFWcharfun_cb != NULL) {
    old_GLFWcharfun_cb = HandleError(Dart_HandleFromPersistent(dart_GLFWcharfun_cb));
    Dart_DeletePersistentHandle(dart_GLFWcharfun_cb);
  }
  dart_GLFWcharfun_cb = new_GLFWcharfun_cb;
  glfwSetCharCallback(window, _GLFWcharfun_cb);
  Dart_SetReturnValue(arguments, old_GLFWcharfun_cb);
}

static Dart_Handle dart_GLFWcharmodsfun_cb = NULL;

void _GLFWcharmodsfun_cb(GLFWwindow* window, unsigned int codepoint, int mods) {
  Dart_Handle arguments[3];
  arguments[0] = HandleError(NewGLFWwindow(window));
  arguments[1] = HandleError(Dart_NewInteger(codepoint));
  arguments[2] = HandleError(Dart_NewInteger(mods));
  HandleError(Dart_InvokeClosure(dart_GLFWcharmodsfun_cb, 3, arguments));
}
void glfwSetCharModsCallback_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle new_GLFWcharmodsfun_cb = HandleError(Dart_GetNativeArgument(arguments, 1));
  new_GLFWcharmodsfun_cb = HandleError(Dart_NewPersistentHandle(new_GLFWcharmodsfun_cb));
  Dart_Handle old_GLFWcharmodsfun_cb = Dart_Null();
  if (dart_GLFWcharmodsfun_cb != NULL) {
    old_GLFWcharmodsfun_cb = HandleError(Dart_HandleFromPersistent(dart_GLFWcharmodsfun_cb));
    Dart_DeletePersistentHandle(dart_GLFWcharmodsfun_cb);
  }
  dart_GLFWcharmodsfun_cb = new_GLFWcharmodsfun_cb;
  glfwSetCharModsCallback(window, _GLFWcharmodsfun_cb);
  Dart_SetReturnValue(arguments, old_GLFWcharmodsfun_cb);
}

static Dart_Handle dart_GLFWmousebuttonfun_cb = NULL;

void _GLFWmousebuttonfun_cb(GLFWwindow* window, int button, int action, int mods) {
  Dart_Handle arguments[4];
  arguments[0] = HandleError(NewGLFWwindow(window));
  arguments[1] = HandleError(Dart_NewInteger(button));
  arguments[2] = HandleError(Dart_NewInteger(action));
  arguments[3] = HandleError(Dart_NewInteger(mods));
  HandleError(Dart_InvokeClosure(dart_GLFWmousebuttonfun_cb, 4, arguments));
}
void glfwSetMouseButtonCallback_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle new_GLFWmousebuttonfun_cb = HandleError(Dart_GetNativeArgument(arguments, 1));
  new_GLFWmousebuttonfun_cb = HandleError(Dart_NewPersistentHandle(new_GLFWmousebuttonfun_cb));
  Dart_Handle old_GLFWmousebuttonfun_cb = Dart_Null();
  if (dart_GLFWmousebuttonfun_cb != NULL) {
    old_GLFWmousebuttonfun_cb = HandleError(Dart_HandleFromPersistent(dart_GLFWmousebuttonfun_cb));
    Dart_DeletePersistentHandle(dart_GLFWmousebuttonfun_cb);
  }
  dart_GLFWmousebuttonfun_cb = new_GLFWmousebuttonfun_cb;
  glfwSetMouseButtonCallback(window, _GLFWmousebuttonfun_cb);
  Dart_SetReturnValue(arguments, old_GLFWmousebuttonfun_cb);
}

static Dart_Handle dart_GLFWcursorposfun_cb = NULL;

void _GLFWcursorposfun_cb(GLFWwindow* window, double xpos, double ypos) {
  Dart_Handle arguments[3];
  arguments[0] = HandleError(NewGLFWwindow(window));
  arguments[1] = HandleError(Dart_NewDouble(xpos));
  arguments[2] = HandleError(Dart_NewDouble(ypos));
  HandleError(Dart_InvokeClosure(dart_GLFWcursorposfun_cb, 3, arguments));
}
void glfwSetCursorPosCallback_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle new_GLFWcursorposfun_cb = HandleError(Dart_GetNativeArgument(arguments, 1));
  new_GLFWcursorposfun_cb = HandleError(Dart_NewPersistentHandle(new_GLFWcursorposfun_cb));
  Dart_Handle old_GLFWcursorposfun_cb = Dart_Null();
  if (dart_GLFWcursorposfun_cb != NULL) {
    old_GLFWcursorposfun_cb = HandleError(Dart_HandleFromPersistent(dart_GLFWcursorposfun_cb));
    Dart_DeletePersistentHandle(dart_GLFWcursorposfun_cb);
  }
  dart_GLFWcursorposfun_cb = new_GLFWcursorposfun_cb;
  glfwSetCursorPosCallback(window, _GLFWcursorposfun_cb);
  Dart_SetReturnValue(arguments, old_GLFWcursorposfun_cb);
}

static Dart_Handle dart_GLFWcursorenterfun_cb = NULL;

void _GLFWcursorenterfun_cb(GLFWwindow* window, int entered) {
  Dart_Handle arguments[2];
  arguments[0] = HandleError(NewGLFWwindow(window));
  arguments[1] = HandleError(Dart_NewBoolean(entered));
  HandleError(Dart_InvokeClosure(dart_GLFWcursorenterfun_cb, 2, arguments));
}
void glfwSetCursorEnterCallback_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle new_GLFWcursorenterfun_cb = HandleError(Dart_GetNativeArgument(arguments, 1));
  new_GLFWcursorenterfun_cb = HandleError(Dart_NewPersistentHandle(new_GLFWcursorenterfun_cb));
  Dart_Handle old_GLFWcursorenterfun_cb = Dart_Null();
  if (dart_GLFWcursorenterfun_cb != NULL) {
    old_GLFWcursorenterfun_cb = HandleError(Dart_HandleFromPersistent(dart_GLFWcursorenterfun_cb));
    Dart_DeletePersistentHandle(dart_GLFWcursorenterfun_cb);
  }
  dart_GLFWcursorenterfun_cb = new_GLFWcursorenterfun_cb;
  glfwSetCursorEnterCallback(window, _GLFWcursorenterfun_cb);
  Dart_SetReturnValue(arguments, old_GLFWcursorenterfun_cb);
}

static Dart_Handle dart_GLFWscrollfun_cb = NULL;

void _GLFWscrollfun_cb(GLFWwindow* window, double xoffset, double yoffset) {
  Dart_Handle arguments[3];
  arguments[0] = HandleError(NewGLFWwindow(window));
  arguments[1] = HandleError(Dart_NewDouble(xoffset));
  arguments[2] = HandleError(Dart_NewDouble(yoffset));
  HandleError(Dart_InvokeClosure(dart_GLFWscrollfun_cb, 3, arguments));
}
void glfwSetScrollCallback_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle new_GLFWscrollfun_cb = HandleError(Dart_GetNativeArgument(arguments, 1));
  new_GLFWscrollfun_cb = HandleError(Dart_NewPersistentHandle(new_GLFWscrollfun_cb));
  Dart_Handle old_GLFWscrollfun_cb = Dart_Null();
  if (dart_GLFWscrollfun_cb != NULL) {
    old_GLFWscrollfun_cb = HandleError(Dart_HandleFromPersistent(dart_GLFWscrollfun_cb));
    Dart_DeletePersistentHandle(dart_GLFWscrollfun_cb);
  }
  dart_GLFWscrollfun_cb = new_GLFWscrollfun_cb;
  glfwSetScrollCallback(window, _GLFWscrollfun_cb);
  Dart_SetReturnValue(arguments, old_GLFWscrollfun_cb);
}

static Dart_Handle dart_GLFWdropfun_cb = NULL;

void _GLFWdropfun_cb(GLFWwindow* window, int count, const char** paths) {
  Dart_Handle arguments[3];
  arguments[0] = HandleError(NewGLFWwindow(window));
  arguments[1] = HandleError(Dart_NewInteger(count));
  arguments[2] = HandleError(Dart_NewList(count));
  for (int i = 0; i<count; i++) {
    HandleError(Dart_ListSetAt(arguments[2], i, Dart_NewStringFromCString(paths[i])));
  }
  HandleError(Dart_InvokeClosure(dart_GLFWscrollfun_cb, 3, arguments));
}

void glfwSetDropCallback_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle new_GLFWdropfun_cb = HandleError(Dart_GetNativeArgument(arguments, 1));
  new_GLFWdropfun_cb = HandleError(Dart_NewPersistentHandle(new_GLFWdropfun_cb));
  Dart_Handle old_GLFWdropfun_cb = Dart_Null();
  if (dart_GLFWdropfun_cb != NULL) {
    old_GLFWdropfun_cb = HandleError(Dart_HandleFromPersistent(dart_GLFWdropfun_cb));
    Dart_DeletePersistentHandle(dart_GLFWdropfun_cb);
  }
  dart_GLFWdropfun_cb = new_GLFWdropfun_cb;
  glfwSetDropCallback(window, _GLFWdropfun_cb);
  Dart_SetReturnValue(arguments, old_GLFWdropfun_cb);
}

void glfwJoystickPresent_native(Dart_NativeArguments arguments) {
  Dart_Handle joy_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t joy = 0;
  if (Dart_IsInteger(joy_obj)) {
    HandleError(Dart_IntegerToInt64(joy_obj, &joy));
  }

  int ret = glfwJoystickPresent(joy);
  Dart_SetReturnValue(arguments, HandleError(Dart_NewBoolean(ret)));
}

void glfwGetJoystickName_native(Dart_NativeArguments arguments) {
  Dart_Handle joy_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t joy = 0;
  if (Dart_IsInteger(joy_obj)) {
    HandleError(Dart_IntegerToInt64(joy_obj, &joy));
  }

  const char* ret = glfwGetJoystickName(joy);
  Dart_SetReturnValue(arguments, HandleError(Dart_NewStringFromCString(ret)));
}

void glfwSetClipboardString_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  Dart_Handle string_obj = HandleError(Dart_GetNativeArgument(arguments, 1));

  const char* string = NULL;
  if (Dart_IsString(string_obj)) {
    HandleError(Dart_StringToCString(string_obj, &string));
  }

  glfwSetClipboardString(window, string);
}

void glfwGetClipboardString_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  const char* ret = glfwGetClipboardString(window);
  Dart_SetReturnValue(arguments, HandleError(Dart_NewStringFromCString(ret)));
}

void glfwGetTime_native(Dart_NativeArguments arguments) {
  double ret = glfwGetTime();
  Dart_SetReturnValue(arguments, HandleError(Dart_NewDouble(ret)));
}

void glfwSetTime_native(Dart_NativeArguments arguments) {
  Dart_Handle time_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  double time = 0.0;
  if (Dart_IsDouble(time_obj)) {
    HandleError(Dart_DoubleValue(time_obj, &time));
  }

  glfwSetTime(time);
}

void glfwMakeContextCurrent_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  glfwMakeContextCurrent(window);
}

void glfwGetCurrentContext_native(Dart_NativeArguments arguments) {
  GLFWwindow* ret = glfwGetCurrentContext();
  Dart_SetReturnValue(arguments, HandleError(NewGLFWwindow(ret)));
}

void glfwSwapBuffers_native(Dart_NativeArguments arguments) {
  Dart_Handle window_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  GLFWwindow* window = NULL;
  if (!Dart_IsNull(window_obj)) {
    HandleError(Dart_GetNativeInstanceField(window_obj, 0, reinterpret_cast<intptr_t *>(&window)));
  }

  glfwSwapBuffers(window);
}

void glfwSwapInterval_native(Dart_NativeArguments arguments) {
  Dart_Handle interval_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  int64_t interval = 0;
  if (Dart_IsInteger(interval_obj)) {
    HandleError(Dart_IntegerToInt64(interval_obj, &interval));
  }

  glfwSwapInterval(interval);
}

void glfwExtensionSupported_native(Dart_NativeArguments arguments) {
  Dart_Handle extension_obj = HandleError(Dart_GetNativeArgument(arguments, 0));

  const char* extension = NULL;
  if (Dart_IsString(extension_obj)) {
    HandleError(Dart_StringToCString(extension_obj, &extension));
  }

  int ret = glfwExtensionSupported(extension);
  Dart_SetReturnValue(arguments, HandleError(Dart_NewBoolean(ret)));
}

void glfwVulkanSupported_native(Dart_NativeArguments arguments) {
  int ret = glfwVulkanSupported();
  Dart_SetReturnValue(arguments, HandleError(Dart_NewInteger(ret)));
}
