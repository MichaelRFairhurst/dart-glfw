# Copyright (c) 2015, the Dart GLFW extension authors. All rights reserved.
# Please see the AUTHORS file for details. Use of this source code is governed
# by a BSD-style license that can be found in the LICENSE file or at
# https://developers.google.com/open-source/licenses/bsd
"""Custom templates for the GLFW extension.

Includes license header, C header ifdef guards, and C includes, etc.
"""

GLFW_LICENSE_HEADER = (
    """// Copyright (c) 2015, the Dart GLFW extension authors. All rights reserved.
// Please see the AUTHORS file for details. Use of this source code is governed
// by a BSD-style license that can be found in the LICENSE file or at
// https://developers.google.com/open-source/licenses/bsd

// This file is auto-generated by scripts in the tools/ directory.
"""
)

GLFW_GENERATED_BINDINGS_HEADER_HEADER = GLFW_LICENSE_HEADER + (
    """#ifndef THIRD_PARTY_DART_GLFW_LIB_SRC_GENERATED_GENERATED_BINDINGS_H_
#define THIRD_PARTY_DART_GLFW_LIB_SRC_GENERATED_GENERATED_BINDINGS_H_

#include "dart_api.h"

""")

GLFW_GENERATED_BINDINGS_HEADER_FOOTER = (
    """

#endif // THIRD_PARTY_DART_GLFW_LIB_SRC_GENERATED_GENERATED_BINDINGS_H_"""
)

GLFW_GENERATED_BINDINGS_HEADER = GLFW_LICENSE_HEADER + (
    """#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include "GLFW/glfw3.h"
#include "dart_api.h"


#include "../instantiate_glfw_classes.h"
#include "../util.h"
#include "glfw_bindings.h"

""")

GLFW_DART_GENERATED_FUNCTIONS_HEADER = GLFW_LICENSE_HEADER + (
    """

part of glfw;

""")

GLFW_DART_GENERATED_CONSTANTS_HEADER = GLFW_LICENSE_HEADER + (
    """

part of glfw;

""")

GLFW_FUNCTION_LIST_HEADER_BODY = GLFW_LICENSE_HEADER + (
    """
#ifndef THIRD_PARTY_DART_GLFW_LIB_SRC_GENERATED_FUNCTION_LIST_H_
#define THIRD_PARTY_DART_GLFW_LIB_SRC_GENERATED_FUNCTION_LIST_H_

#include "dart_api.h"

struct FunctionLookup {
  const char* name;
  Dart_NativeFunction function;
};

extern const struct FunctionLookup *function_list;

#endif // THIRD_PARTY_DART_GLFW_LIB_SRC_GENERATED_FUNCTION_LIST_H_
""")

GLFW_FUNCTION_LIST_HEADER = GLFW_LICENSE_HEADER + (
    """
#include <stdlib.h>
#include "dart_api.h"

#include "../manual_bindings.h"
#include "function_list.h"
#include "glfw_bindings.h"

// function_list is used by ResolveName in lib/src/glfw_extension.cc.
const struct FunctionLookup _function_list[] = {
""")

GLFW_FUNCTION_LIST_FOOTER = ("""
    {NULL, NULL}};
// This prevents the compiler from complaining about initializing improperly.
const struct FunctionLookup *function_list = _function_list;
""")

GLFW_ARGUMENTS_ARRAY_TEMPLATE = (
    "arguments[{i}] = HandleError({new_handle_call});"
)

DART_CALLBACK_HANDLER_TEMPLATE = (
    """static Dart_Handle dart_{callback_type}_cb = NULL;

void _{callback_type}_cb({c_arguments}) {{
  Dart_Handle arguments[{num_arguments}];
  {create_dart_argument_handles}
  HandleError(Dart_InvokeClosure(dart_{callback_type}_cb, {num_arguments}, arguments));
}}"""
)

DART_CALLBACK_HANDLE_ARGUMENT_TEMPLATE = (
    """Dart_Handle new_{callback_type}_cb = HandleError(Dart_GetNativeArgument(arguments, {i}));
  new_{callback_type}_cb = HandleError(Dart_NewPersistentHandle(new_{callback_type}_cb));""")

GLFW_CALLBACK_BINDING_TEMPLATE = (
    """void {extension_function_name}(Dart_NativeArguments arguments) {{
  {get_native_arguments}
  Dart_Handle old_{callback_type}_cb = Dart_Null();
  if (dart_{callback_type}_cb != NULL) {{
    old_{callback_type}_cb = HandleError(Dart_HandleFromPersistent(dart_{callback_type}_cb));
    Dart_DeletePersistentHandle(dart_{callback_type}_cb);
  }}
  dart_{callback_type}_cb = new_{callback_type}_cb;
  {function_name}({arguments});
  Dart_SetReturnValue(arguments, old_{callback_type}_cb);
}}
"""
)

_GLFW_HANDLE_TO_C_VAR_TEMPLATE = (
    """
  GLFWTYPE* {argument_name} = NULL;
  if (!Dart_IsNull({argument_name}_obj)) {{
    HandleError(Dart_GetNativeInstanceField({argument_name}_obj, 0, reinterpret_cast<intptr_t *>(&{argument_name})));
  }}
"""
)

_GLFW_NONOPAQUE_HANDLE_TO_C_VAR_TEMPLATE = (
    """
  GLFWTYPE* {argument_name} = NULL;
  if (!Dart_IsNull({argument_name}_obj)) {{
    {argument_name} = NewGLFWTYPEFromDart({argument_name}_obj);
  }}
"""
)

MONITOR_HANDLE_TO_C_VAR_TEMPLATE = (
    _GLFW_HANDLE_TO_C_VAR_TEMPLATE.replace("GLFWTYPE", "GLFWmonitor")
)
WINDOW_HANDLE_TO_C_VAR_TEMPLATE = (
    _GLFW_HANDLE_TO_C_VAR_TEMPLATE.replace("GLFWTYPE", "GLFWwindow")
)
CURSOR_HANDLE_TO_C_VAR_TEMPLATE = (
    _GLFW_HANDLE_TO_C_VAR_TEMPLATE.replace("GLFWTYPE", "GLFWcursor")
)
VIDMODE_HANDLE_TO_C_VAR_TEMPLATE = (
    _GLFW_NONOPAQUE_HANDLE_TO_C_VAR_TEMPLATE.replace("GLFWTYPE", "GLFWvidmap")
)
GAMMARAMP_HANDLE_TO_C_VAR_TEMPLATE = (
    _GLFW_NONOPAQUE_HANDLE_TO_C_VAR_TEMPLATE.replace(
        "GLFWTYPE", "GLFWgammaramp")
)
IMAGE_HANDLE_TO_C_VAR_TEMPLATE = (
    _GLFW_NONOPAQUE_HANDLE_TO_C_VAR_TEMPLATE.replace("GLFWTYPE", "GLFWimage")
)

GLFWVIDMODE_FREE_TEMPLATE = (
    """
  if ({argument_name} != NULL) {{
    free({argument_name});
  }}
"""
)

GLFWGAMMARAMP_FREE_TEMPLATE = (
    """
  if ({argument_name} != NULL) {{
    free({argument_name}->red);
    free({argument_name}->green);
    free({argument_name}->blue);
    free({argument_name});
  }}
"""
)

GLFWIMAGE_FREE_TEMPLATE = (
    """
  if ({argument_name} != NULL) {{
    free({argument_name}->pixels);
    free({argument_name});
  }}
"""
)
